<?php

namespace Corcel;

/**
 * Interface Shortcode
 *
 * @package Corcel
 * @author Junior Grossi <juniorgro@gmail.com>
 */
interface Shortcode
{
    /**
     * @param ShortcodeInterface $shortcode
     * @return string
     */
    public function render(\Thunder\Shortcode\Shortcode\ShortcodeInterface $shortcode);
}
/**
 * Class Database
 *
 * @package Corcel
 * @author Junior Grossi <juniorgro@gmail.com>
 */
class Database
{
    /**
     * @var array
     */
    protected static $baseParams = ['driver' => 'mysql', 'host' => 'localhost', 'charset' => 'utf8', 'collation' => 'utf8_unicode_ci', 'prefix' => 'wp_'];
    /**
     * @param array $params
     * @return \Illuminate\Database\Capsule\Manager
     */
    public static function connect(array $params)
    {
    }
}
namespace Corcel\Laravel\Auth;

/**
 * Trait ResetsPasswords
 *
 * @package Corcel\Laravel\Auth
 * @author Mickael Burguet <www.rundef.com>
 * @author Junior Grossi <juniorgro@gmail.com>
 */
trait ResetsPasswords
{
    /**
     * Reset the given user's password.
     *
     * @param CanResetPassword $user
     * @param string $password
     */
    protected function resetPassword(\Illuminate\Contracts\Auth\CanResetPassword $user, $password)
    {
    }
    /**
     * @return mixed
     */
    protected function guard()
    {
    }
}
/**
 * Class AuthUserProvider
 *
 * @package Corcel\Laravel\Auth
 * @author Mickael Burguet <www.rundef.com>
 * @author Junior Grossi <juniorgro@gmail.com>
 */
class AuthUserProvider implements \Illuminate\Contracts\Auth\UserProvider
{
    /**
     * @var array
     */
    protected $config = [];
    /**
     * @param array $config
     */
    public function __construct(array $config = [])
    {
    }
    /**
     * Retrieve a user by their unique identifier.
     *
     * @param mixed $identifier
     * @return \Illuminate\Contracts\Auth\Authenticatable|null
     */
    public function retrieveById($identifier)
    {
    }
    /**
     * Retrieve a user by their unique identifier and "remember me" token.
     *
     * @param mixed  $identifier
     * @param string $token
     * @return \Illuminate\Contracts\Auth\Authenticatable|null
     */
    public function retrieveByToken($identifier, $token)
    {
    }
    /**
     * Update the "remember me" token for the given user in storage.
     *
     * @param \Illuminate\Contracts\Auth\Authenticatable $user
     * @param string $token
     */
    public function updateRememberToken(\Illuminate\Contracts\Auth\Authenticatable $user, $token)
    {
    }
    /**
     * Retrieve a user by the given credentials.
     *
     * @param array $credentials
     * @return \Illuminate\Contracts\Auth\Authenticatable|null
     */
    public function retrieveByCredentials(array $credentials)
    {
    }
    /**
     * Validate a user against the given credentials.
     *
     * @param \Illuminate\Contracts\Auth\Authenticatable $user
     * @param array $credentials
     * @return bool
     */
    public function validateCredentials(\Illuminate\Contracts\Auth\Authenticatable $user, array $credentials): bool
    {
    }
    /**
     * Create a new instance of the model.
     *
     * @return \Illuminate\Database\Eloquent\Model
     */
    protected function createModel()
    {
    }
    public function rehashPasswordIfRequired(\Illuminate\Contracts\Auth\Authenticatable $user, array $credentials, bool $force = false)
    {
    }
}
namespace Corcel\Laravel;

/**
 * Class CorcelServiceProvider
 *
 * @package Corcel\Providers\Laravel
 * @author Mickael Burguet <www.rundef.com>
 * @author Junior Grossi <juniorgro@gmail.com>
 */
class CorcelServiceProvider extends \Illuminate\Support\ServiceProvider
{
    /**
     * @return void
     */
    public function boot()
    {
    }
    /**
     * @return void
     */
    public function register()
    {
    }
}
namespace Corcel\Services;

/**
 * Class PasswordService
 *
 * @package Corcel\Services
 * @author Mickael Burguet <www.rundef.com>
 * @author Junior Grossi <juniorgro@gmail.com>
 */
class PasswordService
{
    public function __construct()
    {
    }
    /**
     * Create a hash (encrypt) of a plain text password.
     *
     * @param string $password Plain text user password to hash
     * @return string The hash string of the password
     */
    public function makeHash($password)
    {
    }
    /**
     * Checks the plaintext password against the encrypted Password.
     *
     * @param string $password Plaintext password
     * @param string $hash Hashed password
     * @return bool
     */
    public function check($password, $hash)
    {
    }
}
namespace Corcel;

/**
 * Class Model
 *
 * @package Corcel
 * @author Mickael Burguet <www.rundef.com>
 * @author Junior Grossi <juniorgro@gmail.com>
 */
class Model extends \Illuminate\Database\Eloquent\Model
{
    /**
     * @var string
     */
    protected $postType;
    /**
     * Replace the original hasMany function to forward the connection name.
     *
     * @param string $related
     * @param string $foreignKey
     * @param string $localKey
     * @return HasMany
     */
    public function hasMany($related, $foreignKey = null, $localKey = null)
    {
    }
    /**
     * Replace the original hasOne function to forward the connection name.
     *
     * @param string $related
     * @param string $foreignKey
     * @param string $localKey
     * @return HasOne
     */
    public function hasOne($related, $foreignKey = null, $localKey = null)
    {
    }
    /**
     * Replace the original belongsTo function to forward the connection name.
     *
     * @param string $related
     * @param string $foreignKey
     * @param string $otherKey
     * @param string $relation
     * @return BelongsTo
     */
    public function belongsTo($related, $foreignKey = null, $otherKey = null, $relation = null)
    {
    }
    /**
     * Replace the original belongsToMany function to forward the connection name.
     *
     * @param string $related
     * @param string $table
     * @param string $foreignPivotKey
     * @param string $relatedPivotKey
     * @param string $parentKey
     * @param string $relatedKey
     * @param string $relation
     * @return BelongsToMany
     */
    public function belongsToMany($related, $table = null, $foreignPivotKey = null, $relatedPivotKey = null, $parentKey = null, $relatedKey = null, $relation = null)
    {
    }
    /**
     * Get the relation value setting the connection name.
     *
     * @param string $key
     * @return mixed
     */
    public function getRelationValue($key)
    {
    }
    /**
     * Set the connection name to model.
     *
     * @param $model
     */
    protected function setRelationConnection($model)
    {
    }
    /**
     * @return string
     */
    public function getConnectionName()
    {
    }
    /**
     * @param $instance
     */
    protected function setInstanceConnection($instance)
    {
    }
}
namespace Corcel\Model\Collection;

/**
 * Class MetaCollection
 *
 * @package Corcel\Model\Collection
 * @author Junior Grossi <juniorgro@gmail.com>
 */
class MetaCollection extends \Illuminate\Database\Eloquent\Collection
{
    /**
     * @param string $key
     * @return mixed
     * @throws \Exception
     */
    public function __get($key)
    {
    }
    /**
     * @param string $name
     * @return bool
     */
    public function __isset($name)
    {
    }
}
namespace Corcel\Model\Meta;

/**
 * Class Meta
 *
 * @package Corcel\Model\Meta
 * @author Junior Grossi <juniorgro@gmail.com>
 */
abstract class Meta extends \Corcel\Model
{
    /**
     * @var string
     */
    protected $primaryKey = 'meta_id';
    /**
     * @var bool
     */
    public $timestamps = false;
    /**
     * @var array
     */
    protected $appends = ['value'];
    /**
     * @return mixed
     */
    public function getValueAttribute()
    {
    }
    /**
     * @param array $models
     * @return MetaCollection
     */
    public function newCollection(array $models = [])
    {
    }
}
/**
 * Class UserMeta
 *
 * @package Corcel\Model\Meta
 * @author Mickael Burguet <www.rundef.com>
 * @author Junior Grossi <juniorgro@gmail.com>
 */
class UserMeta extends \Corcel\Model\Meta\Meta
{
    /**
     * @var string
     */
    protected $table = 'usermeta';
    /**
     * @var string
     */
    protected $primaryKey = 'umeta_id';
    /**
     * @var array
     */
    protected $fillable = ['meta_key', 'meta_value', 'user_id'];
    /**
     * @return \Illuminate\Database\Eloquent\Relations\BelongsTo
     */
    public function user()
    {
    }
}
/**
 * Class TermMeta
 *
 * @package Corcel\Model\Meta
 * @author Junior Grossi <juniorgro@gmail.com>
 */
class TermMeta extends \Corcel\Model\Meta\Meta
{
    /** @var string */
    protected $table = 'termmeta';
    /** @var string */
    protected $primaryKey = 'meta_id';
    /** @var array */
    protected $fillable = ['meta_key', 'meta_value', 'term_id'];
    public function term(): \Illuminate\Database\Eloquent\Relations\BelongsTo
    {
    }
}
/**
 * Class PostMeta
 *
 * @package Corcel\Model\Meta
 * @author Junior Grossi <juniorgro@gmail.com>
 */
class PostMeta extends \Corcel\Model\Meta\Meta
{
    /**
     * @var string
     */
    protected $table = 'postmeta';
    /**
     * @var array
     */
    protected $fillable = ['meta_key', 'meta_value', 'post_id'];
    /**
     * @return \Illuminate\Database\Eloquent\Relations\BelongsTo
     */
    public function post()
    {
    }
}
/**
 * Class ThumbnailMeta
 *
 * @package Corcel\Model\Meta
 * @author Junior Grossi <juniorgro@gmail.com>
 */
class ThumbnailMeta extends \Corcel\Model\Meta\PostMeta
{
    const SIZE_THUMBNAIL = 'thumbnail';
    const SIZE_MEDIUM = 'medium';
    const SIZE_LARGE = 'large';
    const SIZE_FULL = 'full';
    /**
     * @var array
     */
    protected $with = ['attachment'];
    /**
     * @return \Illuminate\Database\Eloquent\Relations\BelongsTo
     */
    public function attachment()
    {
    }
    /**
     * @param string $size
     * @return array
     * @throws \Exception
     */
    public function size($size)
    {
    }
    /**
     * @return string
     */
    public function __toString()
    {
    }
}
/**
 * Class CommentMeta
 *
 * @package Corcel\Model\Meta
 * @author Junior Grossi <juniorgro@gmail.com>
 */
class CommentMeta extends \Corcel\Model\Meta\Meta
{
    /**
     * @var string
     */
    protected $table = 'commentmeta';
    /**
     * @var array
     */
    protected $fillable = ['meta_key', 'meta_value', 'comment_id'];
    /**
     * @return \Illuminate\Database\Eloquent\Relations\BelongsTo
     */
    public function comment()
    {
    }
}
namespace Corcel\Concerns;

/**
 * Trait HasMetaFields
 *
 * @package Corcel\Traits
 * @author Junior Grossi <juniorgro@gmail.com>
 */
trait MetaFields
{
    /**
     * @var array
     */
    protected $builtInClasses = [\Corcel\Model\Comment::class => \Corcel\Model\Meta\CommentMeta::class, \Corcel\Model\Post::class => \Corcel\Model\Meta\PostMeta::class, \Corcel\Model\Term::class => \Corcel\Model\Meta\TermMeta::class, \Corcel\Model\User::class => \Corcel\Model\Meta\UserMeta::class];
    /**
     * @return \Illuminate\Database\Eloquent\Relations\HasMany
     */
    public function fields()
    {
    }
    /**
     * @return \Illuminate\Database\Eloquent\Relations\HasMany
     */
    public function meta()
    {
    }
    /**
     * @return string
     * @throws \UnexpectedValueException
     */
    protected function getMetaClass()
    {
    }
    /**
     * @return string
     * @throws \UnexpectedValueException
     */
    protected function getMetaForeignKey(): string
    {
    }
    /**
     * @param Builder $query
     * @param string|array $meta
     * @param mixed $value
     * @param string $operator
     * @return Builder
     */
    public function scopeHasMeta(\Illuminate\Database\Eloquent\Builder $query, $meta, $value = null, string $operator = '=')
    {
    }
    /**
     * @param Builder $query
     * @param string $meta
     * @param mixed $value
     * @return Builder
     */
    public function scopeHasMetaLike(\Illuminate\Database\Eloquent\Builder $query, $meta, $value = null)
    {
    }
    /**
     * @param string $key
     * @param mixed $value
     * @return bool
     */
    public function saveField($key, $value)
    {
    }
    /**
     * @param string|array $key
     * @param mixed $value
     * @return bool
     */
    public function saveMeta($key, $value = null)
    {
    }
    /**
     * @param string $key
     * @param mixed $value
     * @return bool
     */
    private function saveOneMeta($key, $value)
    {
    }
    /**
     * @param string $key
     * @param mixed $value
     * @return \Illuminate\Database\Eloquent\Model
     */
    public function createField($key, $value)
    {
    }
    /**
     * @param string|array $key
     * @param mixed $value
     * @return \Illuminate\Database\Eloquent\Model|\Illuminate\Support\Collection
     */
    public function createMeta($key, $value = null)
    {
    }
    /**
     * @param string $key
     * @param mixed $value
     * @return \Illuminate\Database\Eloquent\Model
     */
    private function createOneMeta($key, $value)
    {
    }
    /**
     * @param string $attribute
     * @return mixed|null
     */
    public function getMeta($attribute)
    {
    }
}
/**
 * Trait HasAcfFields
 *
 * @package Corcel\Traits
 * @author Junior Grossi <juniorgro@gmail.com>
 */
trait AdvancedCustomFields
{
    /**
     * @return AdvancedCustomFields
     */
    public function getAcfAttribute()
    {
    }
}
namespace Corcel\Model;

/**
 * Class Term.
 *
 * @package Corcel\Model
 * @author Junior Grossi <juniorgro@gmail.com>
 */
class Term extends \Corcel\Model
{
    use \Corcel\Concerns\MetaFields;
    use \Corcel\Concerns\AdvancedCustomFields;
    /**
     * @var string
     */
    protected $table = 'terms';
    /**
     * @var string
     */
    protected $primaryKey = 'term_id';
    /**
     * @var bool
     */
    public $timestamps = false;
    /**
     * @return \Illuminate\Database\Eloquent\Relations\HasOne
     */
    public function taxonomy()
    {
    }
}
/**
 * Class Taxonomy
 *
 * @package Corcel\Model
 * @author Junior Grossi <juniorgro@gmail.com>
 */
class Taxonomy extends \Corcel\Model
{
    /**
     * @var string
     */
    protected $table = 'term_taxonomy';
    /**
     * @var string
     */
    protected $primaryKey = 'term_taxonomy_id';
    /**
     * @var array
     */
    protected $with = ['term'];
    /**
     * @var bool
     */
    public $timestamps = false;
    /**
     * @return \Illuminate\Database\Eloquent\Relations\HasMany
     */
    public function meta()
    {
    }
    /**
     * @return \Illuminate\Database\Eloquent\Relations\BelongsTo
     */
    public function term()
    {
    }
    /**
     * @return \Illuminate\Database\Eloquent\Relations\BelongsTo
     */
    public function parent()
    {
    }
    /**
     * @return \Illuminate\Database\Eloquent\Relations\BelongsToMany
     */
    public function posts()
    {
    }
    /**
     * @param \Illuminate\Database\Query\Builder $query
     * @return TaxonomyBuilder
     */
    public function newEloquentBuilder($query)
    {
    }
    /**
     * @return TaxonomyBuilder
     */
    public function newQuery()
    {
    }
    /**
     * Magic method to return the meta data like the post original fields.
     *
     * @param string $key
     * @return string
     */
    public function __get($key)
    {
    }
}
/**
 * Class Menu
 *
 * @package Corcel\Model
 * @author Yoram de Langen <yoramdelangen@gmail.com>
 * @author Junior Grossi <juniorgro@gmail.com>
 */
class Menu extends \Corcel\Model\Taxonomy
{
    /**
     * @var string
     */
    protected $taxonomy = 'nav_menu';
    /**
     * @var array
     */
    protected $with = ['term', 'items'];
    /**
     * @return \Illuminate\Database\Eloquent\Relations\BelongsToMany
     */
    public function items()
    {
    }
}
namespace Corcel\Concerns;

/**
 * Trait AliasesTrait
 *
 * @package Corcel\Traits
 * @author Junior Grossi <juniorgro@gmail.com>
 */
trait Aliases
{
    /**
     * @return array
     */
    public static function getAliases()
    {
    }
    /**
     * @param string $new
     * @param string $old
     */
    public static function addAlias($new, $old)
    {
    }
    /**
     * @param string $key
     * @return mixed
     */
    public function getAttribute($key)
    {
    }
    /**
     * Get alias value from mutator or directly from attribute
     *
     * @param  string $key
     * @param  mixed $value
     * @return mixed
     */
    public function mutateAttribute($key, $value)
    {
    }
}
/**
 * Trait ShortcodesTrait
 *
 * @package Corcel\Traits
 * @author Mickael Burguet <www.rundef.com>
 * @author Junior Grossi <juniorgro@gmail.com>
 */
trait Shortcodes
{
    /**
     * @var array
     */
    protected static $shortcodes = [];
    /** @var ParserInterface */
    private $shortcodeParser;
    /**
     * @param string $tag the shortcode tag
     * @param \Closure $function the shortcode handling function
     */
    public static function addShortcode($tag, $function)
    {
    }
    /**
     * Removes a shortcode handler.
     *
     * @param string $tag the shortcode tag
     */
    public static function removeShortcode($tag)
    {
    }
    /**
     * Change the default shortcode parser
     *
     * @param ParserInterface $parser
     * @return Shortcodes
     */
    public function setShortcodeParser(\Thunder\Shortcode\Parser\ParserInterface $parser): self
    {
    }
    /**
     * Process the shortcodes.
     *
     * @param string $content the content
     * @return string
     */
    public function stripShortcodes($content)
    {
    }
    /**
     * @return ShortcodeFacade
     */
    private function getShortcodeHandlerInstance(): \Thunder\Shortcode\ShortcodeFacade
    {
    }
    /**
     * @param ShortcodeFacade $facade
     */
    private function parseClassShortcodes(\Thunder\Shortcode\ShortcodeFacade $facade)
    {
    }
    /**
     * @param ShortcodeFacade $facade
     */
    private function parseConfigShortcodes(\Thunder\Shortcode\ShortcodeFacade $facade)
    {
    }
}
/**
 * Trait OrderedTrait
 *
 * @package Corcel\Traits
 * @author Junior Grossi <juniorgro@gmail.com>
 */
trait OrderScopes
{
    /**
     * @param Builder $query
     * @return Builder
     */
    public function scopeNewest(\Illuminate\Database\Eloquent\Builder $query)
    {
    }
    /**
     * @param Builder $query
     * @return Builder
     */
    public function scopeOldest(\Illuminate\Database\Eloquent\Builder $query)
    {
    }
}
/**
 * Trait CustomTimestamps
 *
 * @package Corcel\Traits
 * @author Junior Grossi <juniorgro@gmail.com>
 */
trait CustomTimestamps
{
    /**
     * @param mixed $value
     * @return mixed
     */
    public function setCreatedAt($value)
    {
    }
    /**
     * @param mixed $value
     * @return mixed
     */
    public function setUpdatedAt($value)
    {
    }
}
namespace Corcel\Model;

/**
 * Class Post
 *
 * @package Corcel\Model
 * @author Junior Grossi <juniorgro@gmail.com>
 * @author Mickael Burguet <www.rundef.com>
 */
class Post extends \Corcel\Model
{
    use \Corcel\Concerns\Aliases;
    use \Corcel\Concerns\AdvancedCustomFields;
    use \Corcel\Concerns\MetaFields;
    use \Corcel\Concerns\Shortcodes;
    use \Corcel\Concerns\OrderScopes;
    use \Corcel\Concerns\CustomTimestamps;
    const CREATED_AT = 'post_date';
    const UPDATED_AT = 'post_modified';
    /**
     * @var string
     */
    protected $table = 'posts';
    /**
     * @var string
     */
    protected $primaryKey = 'ID';
    /**
     * @var array
     */
    protected $dates = ['post_date', 'post_date_gmt', 'post_modified', 'post_modified_gmt'];
    /**
     * @var array
     */
    protected $with = ['meta'];
    /**
     * @var array
     */
    protected static $postTypes = [];
    /**
     * @var array
     */
    protected $fillable = ['post_content', 'post_title', 'post_excerpt', 'post_type', 'to_ping', 'pinged', 'post_content_filtered'];
    /**
     * @var array
     */
    protected $appends = ['title', 'slug', 'content', 'type', 'mime_type', 'url', 'author_id', 'parent_id', 'created_at', 'updated_at', 'excerpt', 'status', 'image', 'terms', 'main_category', 'keywords', 'keywords_str'];
    /**
     * @var array
     */
    protected static $aliases = ['title' => 'post_title', 'content' => 'post_content', 'excerpt' => 'post_excerpt', 'slug' => 'post_name', 'type' => 'post_type', 'mime_type' => 'post_mime_type', 'url' => 'guid', 'author_id' => 'post_author', 'parent_id' => 'post_parent', 'created_at' => 'post_date', 'updated_at' => 'post_modified', 'status' => 'post_status'];
    /**
     * @param array $attributes
     * @param null $connection
     * @return mixed
     */
    public function newFromBuilder($attributes = [], $connection = null)
    {
    }
    /**
     * @param array $attributes
     * @return array
     */
    protected function getPostInstance(array $attributes)
    {
    }
    /**
     * @param \Illuminate\Database\Query\Builder $query
     * @return PostBuilder
     */
    public function newEloquentBuilder($query)
    {
    }
    /**
     * @return PostBuilder
     */
    public function newQuery()
    {
    }
    /**
     * @return \Illuminate\Database\Eloquent\Relations\HasOne
     */
    public function thumbnail()
    {
    }
    /**
     * @return \Illuminate\Database\Eloquent\Relations\BelongsToMany
     */
    public function taxonomies()
    {
    }
    /**
     * @return \Illuminate\Database\Eloquent\Relations\HasMany
     */
    public function comments()
    {
    }
    /**
     * @return \Illuminate\Database\Eloquent\Relations\BelongsTo
     */
    public function author()
    {
    }
    /**
     * @return \Illuminate\Database\Eloquent\Relations\BelongsTo
     */
    public function parent()
    {
    }
    /**
     * @return \Illuminate\Database\Eloquent\Relations\HasMany
     */
    public function children()
    {
    }
    /**
     * @return \Illuminate\Database\Eloquent\Relations\HasMany
     */
    public function attachment()
    {
    }
    /**
     * @return \Illuminate\Database\Eloquent\Relations\HasMany
     */
    public function revision()
    {
    }
    /**
     * Whether the post contains the term or not.
     *
     * @param string $taxonomy
     * @param string $term
     * @return bool
     */
    public function hasTerm($taxonomy, $term)
    {
    }
    /**
     * @return string
     */
    public function getPostType()
    {
    }
    /**
     * @return string
     */
    public function getContentAttribute()
    {
    }
    /**
     * @return string
     */
    public function getExcerptAttribute()
    {
    }
    /**
     * Gets the featured image if any
     * Looks in meta the _thumbnail_id field.
     *
     * @return string
     */
    public function getImageAttribute()
    {
    }
    /**
     * Gets all the terms arranged taxonomy => terms[].
     *
     * @return array
     */
    public function getTermsAttribute()
    {
    }
    /**
     * Gets the first term of the first taxonomy found.
     *
     * @return string
     */
    public function getMainCategoryAttribute()
    {
    }
    /**
     * Gets the keywords as array.
     *
     * @return array
     */
    public function getKeywordsAttribute()
    {
    }
    /**
     * Gets the keywords as string.
     *
     * @return string
     */
    public function getKeywordsStrAttribute()
    {
    }
    /**
     * @param string $name The post type slug
     * @param string $class The class to be instantiated
     */
    public static function registerPostType($name, $class)
    {
    }
    /**
     * Clears any registered post types.
     */
    public static function clearRegisteredPostTypes()
    {
    }
    /**
     * Get the post format, like the WP get_post_format() function.
     *
     * @return bool|string
     */
    public function getFormat()
    {
    }
    /**
     * @param string $key
     * @return mixed
     */
    public function __get($key)
    {
    }
}
/**
 * Class CustomLink
 *
 * @package Corcel\Model
 * @author Junior Grossi <juniorgro@gmail.com>
 */
class CustomLink extends \Corcel\Model\Post
{
    /**
     * @var string
     */
    protected $table = 'posts';
    /**
     * @var string
     */
    protected $primaryKey = 'ID';
    /**
     * @param string $key
     * @return mixed
     */
    public function __get($key)
    {
    }
}
/**
 * Class Page
 *
 * @package Corcel\Model
 * @author Junior Grossi <juniorgro@gmail.com>
 */
class Page extends \Corcel\Model\Post
{
    /**
     * @var string
     */
    protected $postType = 'page';
    /**
     * @param Builder $query
     * @return mixed
     */
    public function scopeHome(\Illuminate\Database\Eloquent\Builder $query)
    {
    }
}
/**
 * Tag class.
 *
 * @package Corcel\Model
 * @author Mickael Burguet <www.rundef.com>
 */
class Tag extends \Corcel\Model\Taxonomy
{
    /**
     * @var string
     */
    protected $taxonomy = 'post_tag';
}
/**
 * Class MenuItem
 *
 * @package Corcel\Model
 * @author Junior Grossi <juniorgro@gmail.com>
 */
class MenuItem extends \Corcel\Model\Post
{
    /**
     * @var string
     */
    protected $postType = 'nav_menu_item';
    /**
     * @var array
     */
    protected $instanceRelations = ['post' => \Corcel\Model\Post::class, 'page' => \Corcel\Model\Page::class, 'custom' => \Corcel\Model\CustomLink::class, 'category' => \Corcel\Model\Taxonomy::class];
    /**
     * @return Post|Page|CustomLink|Taxonomy
     */
    public function parent()
    {
    }
    /**
     * @return Post|Page|CustomLink|Taxonomy
     */
    public function instance()
    {
    }
    /**
     * @return string
     */
    protected function getClassName()
    {
    }
}
namespace Corcel\Model\Builder;

/**
 * Class PostBuilder
 *
 * @package Corcel\Model\Builder
 * @author Junior Grossi <juniorgro@gmail.com>
 */
class PostBuilder extends \Illuminate\Database\Eloquent\Builder
{
    /**
     * @param string $status
     * @return PostBuilder
     */
    public function status($status)
    {
    }
    /**
     * @return PostBuilder
     */
    public function published()
    {
    }
    /**
     * @param string $type
     * @return PostBuilder
     */
    public function type($type)
    {
    }
    /**
     * @param array $types
     * @return PostBuilder
     */
    public function typeIn(array $types)
    {
    }
    /**
     * @param string $slug
     * @return PostBuilder
     */
    public function slug($slug)
    {
    }
    /**
     * @param string $postParentId
     * @return PostBuilder
     */
    public function parent($postParentId)
    {
    }
    /**
     * @param string $taxonomy
     * @param mixed $terms
     * @return PostBuilder
     */
    public function taxonomy($taxonomy, $terms)
    {
    }
    /**
     * @param mixed $term
     * @return PostBuilder
     */
    public function search($term = false)
    {
    }
}
/**
 * Class CommentBuilder
 *
 * @package Corcel\Model\Builder
 * @author Junior Grossi <juniorgro@gmail.com>
 */
class CommentBuilder extends \Illuminate\Database\Eloquent\Builder
{
    /**
     * @return CommentBuilder
     */
    public function approved()
    {
    }
}
/**
 * Class TaxonomyBuilder
 *
 * @package Corcel
 * @author Junior Grossi <juniorgro@gmail.com>
 * @author Yoram de Langen <yoramdelangen@gmail.com>
 */
class TaxonomyBuilder extends \Illuminate\Database\Eloquent\Builder
{
    /**
     * @return TaxonomyBuilder
     */
    public function category()
    {
    }
    /**
     * @return TaxonomyBuilder
     */
    public function menu()
    {
    }
    /**
     * @param string $name
     * @return TaxonomyBuilder
     */
    public function name($name)
    {
    }
    /**
     * @param string $slug
     * @return TaxonomyBuilder
     */
    public function slug($slug = null)
    {
    }
    /**
     * @param null $slug
     * @return TaxonomyBuilder
     */
    public function term($slug = null)
    {
    }
}
namespace Corcel\Model;

/**
 * Class TermRelationship.
 *
 * @package Corcel\Model
 * @author Junior Grossi <juniorgro@gmail.com>
 */
class TermRelationship extends \Corcel\Model
{
    /**
     * @var string
     */
    protected $table = 'term_relationships';
    /**
     * @var array
     */
    protected $primaryKey = ['object_id', 'term_taxonomy_id'];
    /**
     * @var bool
     */
    public $timestamps = false;
    /**
     * @var bool
     */
    public $incrementing = false;
    /**
     * @return \Illuminate\Database\Eloquent\Relations\BelongsTo
     */
    public function post()
    {
    }
    /**
     * @return \Illuminate\Database\Eloquent\Relations\BelongsTo
     */
    public function taxonomy()
    {
    }
}
/**
 * Class Attachment
 *
 * @package Corcel\Model
 * @author José CI <josec89@gmail.com>
 * @author Junior Grossi <juniorgro@gmail.com>
 */
class Attachment extends \Corcel\Model\Post
{
    use \Corcel\Concerns\Aliases;
    /**
     * @var string
     */
    protected $postType = 'attachment';
    /**
     * @var array
     */
    protected $appends = ['title', 'url', 'type', 'description', 'caption', 'alt'];
    /**
     * @var array
     */
    protected static $aliases = ['title' => 'post_title', 'url' => 'guid', 'type' => 'post_mime_type', 'description' => 'post_content', 'caption' => 'post_excerpt', 'alt' => ['meta' => '_wp_attachment_image_alt']];
}
/**
 * Class Comment
 *
 * @package Corcel\Model
 * @author Junior Grossi <juniorgro@gmail.com>
 */
class Comment extends \Corcel\Model
{
    use \Corcel\Concerns\MetaFields;
    use \Corcel\Concerns\CustomTimestamps;
    const CREATED_AT = 'comment_date';
    const UPDATED_AT = null;
    /**
     * @var string
     */
    protected $table = 'comments';
    /**
     * @var string
     */
    protected $primaryKey = 'comment_ID';
    /**
     * @var array
     */
    protected $dates = ['comment_date'];
    /**
     * Find a comment by post ID.
     *
     * @param int $postId
     * @return Comment
     */
    public static function findByPostId($postId)
    {
    }
    /**
     * @return \Illuminate\Database\Eloquent\Relations\BelongsTo
     */
    public function post()
    {
    }
    /**
     * @return \Illuminate\Database\Eloquent\Relations\BelongsTo
     */
    public function parent()
    {
    }
    /**
     * @return \Illuminate\Database\Eloquent\Relations\BelongsTo
     */
    public function original()
    {
    }
    /**
     * @return \Illuminate\Database\Eloquent\Relations\HasMany
     */
    public function replies()
    {
    }
    /**
     * @return bool
     */
    public function isApproved()
    {
    }
    /**
     * @return bool
     */
    public function isReply()
    {
    }
    /**
     * @return bool
     */
    public function hasReplies()
    {
    }
    /**
     * @param \Illuminate\Database\Query\Builder $query
     * @return CommentBuilder
     */
    public function newEloquentBuilder($query)
    {
    }
    /**
     * @param mixed $value
     * @return void
     */
    public function setUpdatedAt($value)
    {
    }
}
/**
 * Class User
 *
 * @package Corcel\Model
 * @author Ashwin Sureshkumar <ashwin.sureshkumar@gmail.com>
 * @author Mickael Burguet <www.rundef.com>
 * @author Junior Grossi <juniorgro@gmail.com>
 */
class User extends \Corcel\Model implements \Illuminate\Contracts\Auth\Authenticatable, \Illuminate\Contracts\Auth\CanResetPassword
{
    const CREATED_AT = 'user_registered';
    const UPDATED_AT = null;
    use \Corcel\Concerns\AdvancedCustomFields;
    use \Corcel\Concerns\Aliases;
    use \Corcel\Concerns\MetaFields;
    use \Corcel\Concerns\OrderScopes;
    /**
     * @var string
     */
    protected $table = 'users';
    /**
     * @var string
     */
    protected $primaryKey = 'ID';
    /**
     * @var array
     */
    protected $hidden = ['user_pass'];
    /**
     * @var array
     */
    protected $dates = ['user_registered'];
    /**
     * @var array
     */
    protected $with = ['meta'];
    /**
     * @var array
     */
    protected static $aliases = ['login' => 'user_login', 'email' => 'user_email', 'slug' => 'user_nicename', 'url' => 'user_url', 'nickname' => ['meta' => 'nickname'], 'first_name' => ['meta' => 'first_name'], 'last_name' => ['meta' => 'last_name'], 'description' => ['meta' => 'description'], 'created_at' => 'user_registered'];
    /**
     * The accessors to append to the model's array form.
     *
     * @var array
     */
    protected $appends = ['login', 'email', 'slug', 'url', 'nickname', 'first_name', 'last_name', 'avatar', 'created_at'];
    /**
     * @param mixed $value
     */
    public function setUpdatedAtAttribute($value)
    {
    }
    /**
     * @return \Illuminate\Database\Eloquent\Relations\HasMany
     */
    public function posts()
    {
    }
    /**
     * @return \Illuminate\Database\Eloquent\Relations\HasMany
     */
    public function comments()
    {
    }
    /**
     * Get the name of the unique identifier for the user.
     *
     * @return string
     */
    public function getAuthIdentifierName()
    {
    }
    /**
     * Get the unique identifier for the user.
     *
     * @return mixed
     */
    public function getAuthIdentifier()
    {
    }
    /**
     * Get the password for the user.
     *
     * @return string
     */
    public function getAuthPassword()
    {
    }
    /**
     * Get the name of the password attribute for the user.
     *
     * @return string
     */
    public function getAuthPasswordName()
    {
    }
    /**
     * Get the token value for the "remember me" session.
     *
     * @return string
     */
    public function getRememberToken()
    {
    }
    /**
     * Set the token value for the "remember me" session.
     *
     * @param string $value
     */
    public function setRememberToken($value)
    {
    }
    /**
     * Get the column name for the "remember me" token.
     *
     * @return string
     */
    public function getRememberTokenName()
    {
    }
    /**
     * Get the e-mail address where password reset links are sent.
     *
     * @return string
     */
    public function getEmailForPasswordReset()
    {
    }
    /**
     * @param string $token
     */
    public function sendPasswordResetNotification($token)
    {
    }
    /**
     * Get the avatar url from Gravatar
     *
     * @return string
     */
    public function getAvatarAttribute()
    {
    }
    /**
     * @param mixed $value
     * @return void
     */
    public function setUpdatedAt($value)
    {
    }
}
/**
 * Option class.
 *
 * @package Corcel\Model
 * @author José CI <josec89@gmail.com>
 * @author Junior Grossi <juniorgro@gmail.com>
 */
class Option extends \Corcel\Model
{
    /**
     * @var string
     */
    protected $table = 'options';
    /**
     * @var string
     */
    protected $primaryKey = 'option_id';
    /**
     * @var bool
     */
    public $timestamps = false;
    /**
     * @var array
     */
    protected $fillable = ['option_name', 'option_value', 'autoload'];
    /**
     * @var array
     */
    protected $appends = ['value'];
    /**
     * @return mixed
     */
    public function getValueAttribute()
    {
    }
    /**
     * @param string $key
     * @param mixed $value
     * @return Option
     */
    public static function add($key, $value)
    {
    }
    /**
     * @param string $name
     * @return mixed
     */
    public static function get($name)
    {
    }
    /**
     * @return array
     * @deprecated
     */
    public static function getAll()
    {
    }
    /**
     * @param array $keys
     * @return array
     */
    public static function asArray($keys = [])
    {
    }
    /**
     * @return array
     */
    public function toArray()
    {
    }
}
namespace Corcel;

/**
 * Class Corcel
 *
 * @package Corcel
 * @author Junior Grossi <juniorgro@gmail.com>
 */
class Corcel
{
    /**
     * @return bool
     */
    public static function isLaravel()
    {
    }
}